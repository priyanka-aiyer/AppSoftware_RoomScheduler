import java.awt.event.ItemEvent;
import java.sql.Date;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Calendar;
import java.util.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import java.lang.*;
import java.text.SimpleDateFormat;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

public class MainFrame extends javax.swing.JDialog {

    private Faculty facultyEntry;
    private FacultyQueries facultyQueries;
    private List<Faculty> resultsFacultyList;
    
    private Dates datesEntry;
    private DatesQueries datesQueries;
    private List<Dates> resultsDatesList;

    private RoomEntry roomEntry;
    private RoomQueries roomQueries;
    private List<RoomEntry> resultsRoomList;

    private WaitlistEntry waitlistEntry;
    private WaitlistQueries waitlistQueries;
    private List<WaitlistEntry> resultsWaitingList;
    private List<WaitlistEntry> resultsWaitListByFaculty;
    private List<WaitlistEntry> resultsAllWaitingList;  
    private List<WaitlistEntry> resultsWaitListByDate;
    private List<WaitlistEntry> resultsWaitListBySeats;

    private ReservationEntry reservationEntry;
    private ReservationEntry reservationEntry2;
    private ReservationQueries reservationQueries;
    private List<ReservationEntry> resultsReservationList;
    private List<ReservationEntry> resultsRoomsReservedList;
    private List<ReservationEntry> resultsReservationListByFaculty;
    private List<ReservationEntry> resultsAllReservationList;
    private List<ReservationEntry> resultsReservationByFaculty;
    private List<ReservationEntry> resultsReservationsByRoomList;
    
    private static String RESERVED_STATUS = "Confirmed";
    private static String WAITLIST_STATUS = "WaitListed";


    /**
     * Creates new form MainFrame
     */
    public MainFrame(java.awt.Frame parent, boolean modal) {
        
        super(parent, modal);
        initComponents();        
        
        facultyQueries = new FacultyQueries();
        datesQueries = new DatesQueries();
        roomQueries = new RoomQueries();
        waitlistQueries = new WaitlistQueries();
        reservationQueries = new ReservationQueries();
        
        // Load the combo boxes with Faculty-names
        rebuildFacultyComboBoxes();

        // Load the combo boxes with Room-names for reservation
        rebuildDateComboBoxes();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        addingFacultyPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        addFacultyNameTextField = new javax.swing.JTextField();
        addFacultyButton = new javax.swing.JButton();
        addFacultyStatusLabel = new javax.swing.JLabel();
        addingRoomPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        addRoomNameTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        addSeatsSpinner = new javax.swing.JSpinner();
        addRoomButton = new javax.swing.JButton();
        addRoomStatusLabel = new javax.swing.JLabel();
        addRoomStatusLabel2 = new javax.swing.JLabel();
        addRoomStatusLabel3 = new javax.swing.JLabel();
        addRoomStatusLabel4 = new javax.swing.JLabel();
        addingDatePanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        addDateSpinner = new javax.swing.JSpinner();
        addDateButton = new javax.swing.JButton();
        addDateStatusLabel = new javax.swing.JLabel();
        reservingRoomPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        reserveFacultyComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        reserveDateComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        reserveSeatsTextField = new javax.swing.JTextField();
        reserveSubmitButton = new javax.swing.JButton();
        addReserveStatusLabel = new javax.swing.JLabel();
        cancelFacultyReservationPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cancelFacultyReservationComboBox = new javax.swing.JComboBox<>();
        cancelFacultyDateReservationComboBox = new javax.swing.JComboBox<>();
        deleteReservationButton = new javax.swing.JButton();
        statusLabelCancelReservation = new javax.swing.JLabel();
        statusLabel2CancelReservation = new javax.swing.JLabel();
        dropRoomPanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        dropRoomNameComboBox = new javax.swing.JComboBox<>();
        deleteRoomButton = new javax.swing.JButton();
        dropRoomStatusLabel = new javax.swing.JLabel();
        dropRoomStatusLabel2 = new javax.swing.JLabel();
        dropRoomStatusLabel03 = new javax.swing.JLabel();
        statusPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusListOnReservationtTextArea1 = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        statusDateComboBox = new javax.swing.JComboBox<>();
        statusOfFacultyPanel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        statusOfFacultyComboBox = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        statusListOnFacultyReservationTextArea1 = new javax.swing.JTextArea();
        waitlistStatusPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        statusListOnWaitlisttTextArea1 = new javax.swing.JTextArea();
        jLabel14 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 255));
        jLabel1.setText("Room Scheduler");

        addingFacultyPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                addingFacultyPanelComponentShown(evt);
            }
        });

        jLabel2.setText("Faculty Name: ");

        addFacultyNameTextField.setColumns(20);

        addFacultyButton.setText("Submit");
        addFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFacultyButtonActionPerformed(evt);
            }
        });

        addFacultyStatusLabel.setText("      ");

        javax.swing.GroupLayout addingFacultyPanelLayout = new javax.swing.GroupLayout(addingFacultyPanel);
        addingFacultyPanel.setLayout(addingFacultyPanelLayout);
        addingFacultyPanelLayout.setHorizontalGroup(
            addingFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addingFacultyPanelLayout.createSequentialGroup()
                .addGroup(addingFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addingFacultyPanelLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(addingFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(addingFacultyPanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(32, 32, 32)
                                .addComponent(addFacultyNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(addFacultyStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(addingFacultyPanelLayout.createSequentialGroup()
                        .addGap(275, 275, 275)
                        .addComponent(addFacultyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(186, Short.MAX_VALUE))
        );
        addingFacultyPanelLayout.setVerticalGroup(
            addingFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addingFacultyPanelLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(addingFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(addFacultyNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(addFacultyButton)
                .addGap(50, 50, 50)
                .addComponent(addFacultyStatusLabel)
                .addContainerGap(199, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add Faculty", addingFacultyPanel);

        addingRoomPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                addingRoomPanelComponentShown(evt);
            }
        });

        jLabel7.setText("Room Name:");
        jLabel7.setToolTipText("");

        addRoomNameTextField.setColumns(5);
        addRoomNameTextField.setToolTipText("");

        jLabel8.setText("Seats:");

        addSeatsSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        addRoomButton.setText("Add Room");
        addRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomButtonActionPerformed(evt);
            }
        });

        addRoomStatusLabel.setText("  ");

        addRoomStatusLabel2.setText("  ");

        addRoomStatusLabel3.setText("  ");

        addRoomStatusLabel4.setText("  ");

        javax.swing.GroupLayout addingRoomPanelLayout = new javax.swing.GroupLayout(addingRoomPanel);
        addingRoomPanel.setLayout(addingRoomPanelLayout);
        addingRoomPanelLayout.setHorizontalGroup(
            addingRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addingRoomPanelLayout.createSequentialGroup()
                .addGroup(addingRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addingRoomPanelLayout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addGroup(addingRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(71, 71, 71)
                        .addGroup(addingRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addSeatsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addRoomNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(addingRoomPanelLayout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addComponent(addRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addingRoomPanelLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(addingRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addRoomStatusLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(addingRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(addRoomStatusLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 606, Short.MAX_VALUE)
                                .addComponent(addRoomStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(addRoomStatusLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        addingRoomPanelLayout.setVerticalGroup(
            addingRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addingRoomPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(addingRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(addRoomNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(addingRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addSeatsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(45, 45, 45)
                .addComponent(addRoomButton)
                .addGap(35, 35, 35)
                .addComponent(addRoomStatusLabel)
                .addGap(18, 18, 18)
                .addComponent(addRoomStatusLabel2)
                .addGap(18, 18, 18)
                .addComponent(addRoomStatusLabel3)
                .addGap(18, 18, 18)
                .addComponent(addRoomStatusLabel4)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add Room", addingRoomPanel);

        addingDatePanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                addingDatePanelComponentShown(evt);
            }
        });

        jLabel9.setText("New Date:");

        addDateSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), new java.util.Date(), null, java.util.Calendar.DAY_OF_WEEK));

        addDateButton.setText("Add");
        addDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDateButtonActionPerformed(evt);
            }
        });

        addDateStatusLabel.setText("   ");

        javax.swing.GroupLayout addingDatePanelLayout = new javax.swing.GroupLayout(addingDatePanel);
        addingDatePanel.setLayout(addingDatePanelLayout);
        addingDatePanelLayout.setHorizontalGroup(
            addingDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addingDatePanelLayout.createSequentialGroup()
                .addGroup(addingDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addingDatePanelLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(addDateStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addingDatePanelLayout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(addDateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addingDatePanelLayout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(addDateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(150, Short.MAX_VALUE))
        );
        addingDatePanelLayout.setVerticalGroup(
            addingDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addingDatePanelLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(addingDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addDateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(55, 55, 55)
                .addComponent(addDateButton)
                .addGap(62, 62, 62)
                .addComponent(addDateStatusLabel)
                .addContainerGap(179, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add Date", addingDatePanel);

        reservingRoomPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                reservingRoomPanelComponentShown(evt);
            }
        });

        jLabel3.setText("Faculty:");

        jLabel4.setText("Date:");

        reserveDateComboBox.setToolTipText("");

        jLabel5.setText("Seats Required:");

        reserveSeatsTextField.setColumns(3);

        reserveSubmitButton.setText("Submit");
        reserveSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveSubmitButtonActionPerformed(evt);
            }
        });

        addReserveStatusLabel.setText("   ");

        javax.swing.GroupLayout reservingRoomPanelLayout = new javax.swing.GroupLayout(reservingRoomPanel);
        reservingRoomPanel.setLayout(reservingRoomPanelLayout);
        reservingRoomPanelLayout.setHorizontalGroup(
            reservingRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservingRoomPanelLayout.createSequentialGroup()
                .addGroup(reservingRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reservingRoomPanelLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(reservingRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(52, 52, 52)
                        .addGroup(reservingRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(reserveDateComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(reserveFacultyComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(reserveSeatsTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)))
                    .addGroup(reservingRoomPanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(addReserveStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(reservingRoomPanelLayout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(reserveSubmitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(134, Short.MAX_VALUE))
        );
        reservingRoomPanelLayout.setVerticalGroup(
            reservingRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservingRoomPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(reservingRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(reserveFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(reservingRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(reserveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(reservingRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(reserveSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addComponent(reserveSubmitButton)
                .addGap(42, 42, 42)
                .addComponent(addReserveStatusLabel)
                .addGap(83, 83, 83))
        );

        jTabbedPane1.addTab("Reserve Room", reservingRoomPanel);

        cancelFacultyReservationPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                cancelFacultyReservationPanelComponentShown(evt);
            }
        });

        jLabel10.setText("Faculty Name:");

        jLabel11.setText("Reservation Date:");

        cancelFacultyReservationComboBox.setToolTipText("");
        cancelFacultyReservationComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cancelFacultyReservationComboBoxItemStateChanged(evt);
            }
        });

        cancelFacultyDateReservationComboBox.setToolTipText("");

        deleteReservationButton.setText("Delete Reservation");
        deleteReservationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteReservationButtonActionPerformed(evt);
            }
        });

        statusLabelCancelReservation.setText("  ");

        statusLabel2CancelReservation.setText("  ");

        javax.swing.GroupLayout cancelFacultyReservationPanelLayout = new javax.swing.GroupLayout(cancelFacultyReservationPanel);
        cancelFacultyReservationPanel.setLayout(cancelFacultyReservationPanelLayout);
        cancelFacultyReservationPanelLayout.setHorizontalGroup(
            cancelFacultyReservationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cancelFacultyReservationPanelLayout.createSequentialGroup()
                .addGroup(cancelFacultyReservationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cancelFacultyReservationPanelLayout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addGroup(cancelFacultyReservationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addGap(64, 64, 64)
                        .addGroup(cancelFacultyReservationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cancelFacultyReservationComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancelFacultyDateReservationComboBox, 0, 148, Short.MAX_VALUE)))
                    .addGroup(cancelFacultyReservationPanelLayout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(deleteReservationButton))
                    .addGroup(cancelFacultyReservationPanelLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(cancelFacultyReservationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(statusLabel2CancelReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(statusLabelCancelReservation, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(144, Short.MAX_VALUE))
        );
        cancelFacultyReservationPanelLayout.setVerticalGroup(
            cancelFacultyReservationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cancelFacultyReservationPanelLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(cancelFacultyReservationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addComponent(cancelFacultyReservationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(cancelFacultyReservationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11)
                    .addComponent(cancelFacultyDateReservationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addComponent(deleteReservationButton)
                .addGap(44, 44, 44)
                .addComponent(statusLabelCancelReservation)
                .addGap(33, 33, 33)
                .addComponent(statusLabel2CancelReservation)
                .addContainerGap(96, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cancel Reservation", cancelFacultyReservationPanel);

        dropRoomPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                dropRoomPanelComponentShown(evt);
            }
        });

        jLabel12.setText("Room Name:");

        dropRoomNameComboBox.setToolTipText("");

        deleteRoomButton.setText("Delete Room");
        deleteRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRoomButtonActionPerformed(evt);
            }
        });

        dropRoomStatusLabel.setText("  ");

        dropRoomStatusLabel2.setText("  ");

        dropRoomStatusLabel03.setText("  ");

        javax.swing.GroupLayout dropRoomPanelLayout = new javax.swing.GroupLayout(dropRoomPanel);
        dropRoomPanel.setLayout(dropRoomPanelLayout);
        dropRoomPanelLayout.setHorizontalGroup(
            dropRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dropRoomPanelLayout.createSequentialGroup()
                .addGroup(dropRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dropRoomStatusLabel03, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(dropRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(dropRoomPanelLayout.createSequentialGroup()
                            .addGap(162, 162, 162)
                            .addComponent(jLabel12)
                            .addGap(55, 55, 55)
                            .addComponent(dropRoomNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(dropRoomPanelLayout.createSequentialGroup()
                            .addGap(218, 218, 218)
                            .addComponent(deleteRoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(dropRoomPanelLayout.createSequentialGroup()
                            .addGap(69, 69, 69)
                            .addComponent(dropRoomStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(dropRoomStatusLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(129, Short.MAX_VALUE))
        );
        dropRoomPanelLayout.setVerticalGroup(
            dropRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dropRoomPanelLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(dropRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(dropRoomNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addComponent(deleteRoomButton)
                .addGap(53, 53, 53)
                .addComponent(dropRoomStatusLabel)
                .addGap(30, 30, 30)
                .addComponent(dropRoomStatusLabel2)
                .addGap(31, 31, 31)
                .addComponent(dropRoomStatusLabel03)
                .addContainerGap(97, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Drop Room", dropRoomPanel);

        statusPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                statusPanelComponentShown(evt);
            }
        });

        statusListOnReservationtTextArea1.setColumns(20);
        statusListOnReservationtTextArea1.setRows(5);
        jScrollPane1.setViewportView(statusListOnReservationtTextArea1);

        jLabel6.setText("Date of Reservation:");

        statusDateComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                statusDateComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(jLabel6)
                        .addGap(51, 51, 51)
                        .addComponent(statusDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Reservations Status (by Date)", statusPanel);

        statusOfFacultyPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                statusOfFacultyPanelComponentShown(evt);
            }
        });

        jLabel13.setText("Faculty Name:");

        statusOfFacultyComboBox.setToolTipText("");
        statusOfFacultyComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                statusOfFacultyComboBoxItemStateChanged(evt);
            }
        });

        statusListOnFacultyReservationTextArea1.setColumns(20);
        statusListOnFacultyReservationTextArea1.setRows(5);
        jScrollPane3.setViewportView(statusListOnFacultyReservationTextArea1);

        javax.swing.GroupLayout statusOfFacultyPanelLayout = new javax.swing.GroupLayout(statusOfFacultyPanel);
        statusOfFacultyPanel.setLayout(statusOfFacultyPanelLayout);
        statusOfFacultyPanelLayout.setHorizontalGroup(
            statusOfFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusOfFacultyPanelLayout.createSequentialGroup()
                .addGroup(statusOfFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statusOfFacultyPanelLayout.createSequentialGroup()
                        .addGap(199, 199, 199)
                        .addComponent(jLabel13)
                        .addGap(61, 61, 61)
                        .addComponent(statusOfFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(statusOfFacultyPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 731, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        statusOfFacultyPanelLayout.setVerticalGroup(
            statusOfFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusOfFacultyPanelLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(statusOfFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(statusOfFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Reservation Status (by Faculty)", statusOfFacultyPanel);

        waitlistStatusPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                waitlistStatusPanelComponentShown(evt);
            }
        });

        statusListOnWaitlisttTextArea1.setColumns(20);
        statusListOnWaitlisttTextArea1.setRows(5);
        jScrollPane2.setViewportView(statusListOnWaitlisttTextArea1);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setText("Room WaitList Status");

        javax.swing.GroupLayout waitlistStatusPanelLayout = new javax.swing.GroupLayout(waitlistStatusPanel);
        waitlistStatusPanel.setLayout(waitlistStatusPanelLayout);
        waitlistStatusPanelLayout.setHorizontalGroup(
            waitlistStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(waitlistStatusPanelLayout.createSequentialGroup()
                .addGap(331, 331, 331)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(269, Short.MAX_VALUE))
            .addGroup(waitlistStatusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        waitlistStatusPanelLayout.setVerticalGroup(
            waitlistStatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, waitlistStatusPanelLayout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Waitlist Status (All)", waitlistStatusPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(297, 297, 297)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 771, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(195, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //////////// EVENT Handling Methods
    
    private void addFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFacultyButtonActionPerformed
        // TODO add your handling code here:
        Boolean existFlag = false;
        
        // Add the faculty to the faculty entity
        String facultyName = addFacultyNameTextField.getText();
        
        // Validate the input for Faculty name
        if (facultyName.length() <= 0) {
            addFacultyStatusLabel.setText("Invalid name entered !");
            return;
        }
        
        existFlag = FacultyQueries.checkFacultyByName(facultyName);
        if (existFlag == true) {
            addFacultyStatusLabel.setText(facultyName + " already exist.");
        }
        
        if (existFlag == false) {
            FacultyQueries.addFaculty(facultyName);
            addFacultyStatusLabel.setText(facultyName + " has been added to the Faculty Master List.");
        }
        // rebuild the reservation faculty combo box.
        rebuildFacultyComboBoxes();

    }//GEN-LAST:event_addFacultyButtonActionPerformed

    private void reserveSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveSubmitButtonActionPerformed
        // TODO add your handling code here:
        Boolean existFlag = false;
        Boolean existRoomsForSeatsFlag = false;
        Boolean existRoomsFlag = false;
        Boolean existWaitlistFlag = false;
        Boolean waitlistFlag = false; 
        
        // Add the Faculty reservation of Room for a specified Date, to the 'Reservations' table.
        String inputFaculty = reserveFacultyComboBox.getSelectedItem().toString(); // fetch selected item from ComboBox
        String inputDate = reserveDateComboBox.getSelectedItem().toString(); // fetch selected item from ComboBox
        String inputSeats = reserveSeatsTextField.getText(); // fetch selected item from ComboBox
        
        // Display format of date as mm-dd-yyyy in GUI Label area
        String inputDateDisplayValue = "";
        SimpleDateFormat displayFormater = new SimpleDateFormat("MM-dd-yyyy"); 
        inputDateDisplayValue = displayFormater.format(Date.valueOf(reserveDateComboBox.getSelectedItem().toString()));

        // Validate the input value of Seats
        if (Integer.parseInt(inputSeats) <= 0)  {
            addReserveStatusLabel.setText("Seats requested should be a positive number ");
            return;
        }
               
        // Check if any Reservation is made by the Faculty on a specific Date
        existFlag = ReservationQueries.checkReservationsByFaculty(inputFaculty, inputDate);
        if (existFlag == true) {
            addReserveStatusLabel.setText(inputFaculty + " already has a room reserved on " + inputDateDisplayValue);
            return;
        }
        else {
            //// Check for availability of rooms on a specific Date
            ArrayList<String> roomReservedList = new ArrayList<String>();;

            resultsRoomsReservedList = ReservationQueries.getRoomsReservedByDate(inputDate);

            int resultsRoomsReservedListSize = resultsRoomsReservedList.size();
            if (resultsRoomsReservedListSize != 0) {
                for (int i = 0; i < resultsRoomsReservedListSize; i++) {
                    reservationEntry = resultsRoomsReservedList.get(i);
                    roomReservedList.add(reservationEntry.getRoom());
                }    
            }        
            int totalRoomsReserved = roomReservedList.size();
           
            //// Check for total rooms available in Tiny College
            ArrayList<String> roomsList = new ArrayList<String>();
            
            resultsRoomList = roomQueries.getAllPossibleRooms();
            int resultsRoomListSize = resultsRoomList.size();
            if (resultsRoomListSize != 0) {
                for (int i = 0; i < resultsRoomListSize; i++) {
                    roomEntry = resultsRoomList.get(i);
                    roomsList.add(roomEntry.getName());
                }    
            }        
            
            int totalRooms = roomsList.size();
            
            if (totalRoomsReserved == totalRooms) {
                // If NO room is available for that date then adding the request of Faculty to WAITLIST 
                // Check if any the Faculty is already Waitlisted for that specified Date
                existWaitlistFlag = WaitlistQueries.checkWaitlistByFaculty(inputFaculty, inputDate);
                if (existWaitlistFlag == true) {
                    addReserveStatusLabel.setText(inputFaculty + " is already Waitlisted for a room on " + inputDateDisplayValue);
                }
                else {
                    WaitlistQueries.addWaitlistEntry(inputFaculty, inputDate, inputSeats);
                    addReserveStatusLabel.setText(inputFaculty + " is Waitlisted, as NO rooms are available for reservation on " + inputDateDisplayValue);
                }
            }
            else {
                // If Room is available on that date, then GET the best-fit Room based on requested Seats
                String roomName = RoomQueries.getBestFitRoom(inputSeats, roomReservedList);
                //System.out.printf("Best-fit roomName as %s \n", roomName);
                
                if (roomName != "") {
                    // Add room Reservation for the Faculty requested for the specified Date
                    ReservationQueries.addReservationEntry(inputFaculty, inputDate, inputSeats, roomName);
                    addReserveStatusLabel.setText(inputFaculty + " is reserved room " + roomName + " for " + inputDateDisplayValue);                
                }
                else // If room is NOT available for that date then add into WaitList
                {
                    // If NO room is available for that date then adding the request of Faculty to WAITLIST 
                    // Check if any the Faculty is already Waitlisted for that specified Date
                    existWaitlistFlag = WaitlistQueries.checkWaitlistByFaculty(inputFaculty, inputDate);
                    if (existWaitlistFlag == true) {
                        addReserveStatusLabel.setText(inputFaculty + " is already Waitlisted for a room on " + inputDateDisplayValue);
                    }
                    else {
                        WaitlistQueries.addWaitlistEntry(inputFaculty, inputDate, inputSeats);
                        addReserveStatusLabel.setText(inputFaculty + " is Waitlisted, as NO available rooms are suitable for requested Seats on " + inputDateDisplayValue);
                    }
                }
            }
        }
    }//GEN-LAST:event_reserveSubmitButtonActionPerformed

    private void statusDateComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_statusDateComboBoxItemStateChanged
        // TODO add your handling code here:
        ArrayList<String> roomReservationList = new ArrayList<String>();  
        String inputDate = statusDateComboBox.getSelectedItem().toString(); // fetch selected item from ComboBox
                
        resultsReservationList = ReservationQueries.getReservationsByDate(inputDate);
        
        String outputArray = "";
        int resultsReservationListSize = resultsReservationList.size();

        String displayValue = "";
        SimpleDateFormat displayFormater = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss"); 

        if (resultsReservationListSize != 0) {
            // Construct String to help display the HEADER info.
            outputArray = outputArray.concat("Name");
            outputArray = outputArray.concat("\t");
            outputArray = outputArray.concat("Reserved_Room# ");
            outputArray = outputArray.concat("\t");
            outputArray = outputArray.concat("Request_Raised_On");
            outputArray = outputArray.concat("\n");
            outputArray = outputArray.concat("\n");

            for (int i = 0; i < resultsReservationListSize; i++) {
                reservationEntry = resultsReservationList.get(i); // fetch record from entity object
                
                // Construct String to help display the Reservations Status sorted by Date & Timestamp
                outputArray = outputArray.concat(reservationEntry.getFaculty());
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat(reservationEntry.getRoom() );
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat("\t");
                //outputArray = outputArray.concat(reservationEntry.getTtimestamp().toString()) ;
                displayValue = displayFormater.format(reservationEntry.getTtimestamp());
                outputArray = outputArray.concat(displayValue);
                
                roomReservationList.add(outputArray);                        
                outputArray = "";                
            }

            String outputFormatStr = "";

            for (int i=0; i < roomReservationList.size(); i++) {
                outputFormatStr = outputFormatStr.concat(roomReservationList.get(i));
                outputFormatStr = outputFormatStr.concat("\n");
            }
            statusListOnReservationtTextArea1.setText(outputFormatStr);
        }                       
        else
            statusListOnReservationtTextArea1.setText("");

    }//GEN-LAST:event_statusDateComboBoxItemStateChanged

    private void statusPanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_statusPanelComponentShown
        // TODO add your handling code here:
        
        String inputDate = statusDateComboBox.getSelectedItem().toString(); // fetch selected item from ComboBox
        ArrayList<String> roomReservationList = new ArrayList<String>();  
                
        reservationQueries = new ReservationQueries();
        resultsReservationList = ReservationQueries.getReservationsByDate(inputDate);
        
        String outputArray = "";
        int resultsReservationListSize = resultsReservationList.size();

        String displayValue = "";
        SimpleDateFormat displayFormater = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss"); 

        if (resultsReservationListSize != 0) {
            // Construct String to help display the HEADER info.
            outputArray = outputArray.concat("Name");
            outputArray = outputArray.concat("\t");
            outputArray = outputArray.concat("Reserved_Room# ");
            outputArray = outputArray.concat("\t");
            outputArray = outputArray.concat("Request_Raised_On");
            outputArray = outputArray.concat("\n");
            outputArray = outputArray.concat("\n");

            for (int i = 0; i < resultsReservationListSize; i++) {
                reservationEntry = resultsReservationList.get(i); // fetch record from entity object
                
                // Construct String to help display the Reservations Status sorted by Date & Timestamp
                outputArray = outputArray.concat(reservationEntry.getFaculty());
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat(reservationEntry.getRoom() );
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat("\t");
                displayValue = displayFormater.format(reservationEntry.getTtimestamp());
                outputArray = outputArray.concat(displayValue);
                
                roomReservationList.add(outputArray);                        
                outputArray = "";                
            }

            String outputFormatStr = "";

            for (int i=0; i < roomReservationList.size(); i++) {
                outputFormatStr = outputFormatStr.concat(roomReservationList.get(i));
                outputFormatStr = outputFormatStr.concat("\n");
            }
            statusListOnReservationtTextArea1.setText(outputFormatStr);
        }                       
    }//GEN-LAST:event_statusPanelComponentShown

    private void waitlistStatusPanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_waitlistStatusPanelComponentShown
        // TODO add your handling code here:
        
        statusListOnWaitlisttTextArea1.setText("  ");                

        // Fetch All Waitlisted entries sorted by reservation-requested DATE,TIMESTAMP
        ArrayList<String> roomWaitingList = new ArrayList<String>();        
        resultsWaitingList = waitlistQueries.getAllWaitLists();
        String outputArray = "";
        int resultsWaitingListSize = resultsWaitingList.size();

        String displayValue = "";
        String displayTsValue = "";
        SimpleDateFormat displayFormater = new SimpleDateFormat("MM-dd-yyyy"); 
        SimpleDateFormat displayTsFormater = new SimpleDateFormat("MM-dd-yyyy HH:mm:ss"); 

        if (resultsWaitingListSize != 0) {
            
            // Construct String to help display the HEADER info.
            outputArray = outputArray.concat("Name");
            outputArray = outputArray.concat("\t");
            outputArray = outputArray.concat("Date_for_Reservation");
            outputArray = outputArray.concat("\t");
            outputArray = outputArray.concat("Seats");
            outputArray = outputArray.concat("\t");
            outputArray = outputArray.concat("WaitList_Priority");
            outputArray = outputArray.concat("\n");
            outputArray = outputArray.concat("\n");          

            for (int i = 0; i < resultsWaitingListSize; i++) {
                waitlistEntry = resultsWaitingList.get(i); // fetch record from entity object

                // Construct display-String to help display in the Waitlist-Status textArea
                outputArray = outputArray.concat(waitlistEntry.getFaculty());
                outputArray = outputArray.concat("\t");
                displayValue = displayFormater.format(waitlistEntry.getDdate());
                outputArray = outputArray.concat(displayValue);
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat(String.valueOf(waitlistEntry.getSeats()) );
                outputArray = outputArray.concat("\t");
                //outputArray = outputArray.concat(waitlistEntry.getTtimestamp().toString());               
                displayTsValue = displayTsFormater.format(waitlistEntry.getTtimestamp());
                outputArray = outputArray.concat(displayTsValue);

                roomWaitingList.add(outputArray);
                outputArray = "";                
            }    

            String outputFormatStr = "";
            for (int i=0; i < roomWaitingList.size(); i++) {
                outputFormatStr = outputFormatStr.concat(roomWaitingList.get(i));
                outputFormatStr = outputFormatStr.concat("\n");
            }
            statusListOnWaitlisttTextArea1.setText(outputFormatStr);                
        }        

    }//GEN-LAST:event_waitlistStatusPanelComponentShown

    private void addingRoomPanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_addingRoomPanelComponentShown
        // TODO add your handling code here:
        
        addRoomNameTextField.setText("");
        
        addRoomStatusLabel.setText("  ");
        addRoomStatusLabel2.setText("  ");
        addRoomStatusLabel3.setText("  ");
        addRoomStatusLabel4.setText("  ");

    }//GEN-LAST:event_addingRoomPanelComponentShown

    private void addingDatePanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_addingDatePanelComponentShown
        // TODO add your handling code here:
        
        addDateStatusLabel.setText("  ");
    }//GEN-LAST:event_addingDatePanelComponentShown

    private void cancelFacultyReservationPanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_cancelFacultyReservationPanelComponentShown
        // TODO add your handling code here:
        
        statusLabelCancelReservation.setText("  ");
        statusLabel2CancelReservation.setText("  ");

        rebuildFacultyReservationsComboBox();
        
        rebuildDateReservationsByFacultyComboBoxes();       
    }//GEN-LAST:event_cancelFacultyReservationPanelComponentShown

    private void dropRoomPanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_dropRoomPanelComponentShown
        // TODO add your handling code here:
        
        dropRoomStatusLabel.setText("  ");
        dropRoomStatusLabel2.setText("  ");
        dropRoomStatusLabel03.setText("  ");

        rebuildRoomsComboBox();
    }//GEN-LAST:event_dropRoomPanelComponentShown

    private void statusOfFacultyPanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_statusOfFacultyPanelComponentShown
        // TODO add your handling code here:
        ArrayList<String> roomFacultyList = new ArrayList<String>();  
        String inputFaculty = statusOfFacultyComboBox.getSelectedItem().toString(); // fetch selected item from ComboBox
                
        resultsReservationListByFaculty = ReservationQueries.getReservationsByFaculty(inputFaculty);
        resultsWaitListByFaculty = WaitlistQueries.getWaitlistByFaculty(inputFaculty);
        
        String outputArray = "";
        int resultsReservationListSize = resultsReservationListByFaculty.size();
        int resultsWaitListSize = resultsWaitListByFaculty.size();
        
        String displayValue = "";
        SimpleDateFormat displayFormater = new SimpleDateFormat("MM-dd-yyyy"); 

        if ((resultsReservationListSize != 0) || (resultsWaitListSize != 0)) {
            // Construct String to help display the HEADER info.
            outputArray = outputArray.concat("Reservation_Date");
            outputArray = outputArray.concat("\t");
            outputArray = outputArray.concat("Status");
            outputArray = outputArray.concat("\t");
            outputArray = outputArray.concat("\t");
            outputArray = outputArray.concat("Reserved_Room #");
            outputArray = outputArray.concat("\n");
            outputArray = outputArray.concat("\n");

            for (int i = 0; i < resultsReservationListSize; i++) {
                reservationEntry = resultsReservationListByFaculty.get(i); // fetch record from entity object                
                // Construct String to help display the Reservations Status sorted by Date & Timestamp
                displayValue = displayFormater.format(reservationEntry.getDdate());
                outputArray = outputArray.concat(displayValue);
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat(RESERVED_STATUS) ;
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat(reservationEntry.getRoom());
                
                roomFacultyList.add(outputArray);                        
                outputArray = "";                
            }

            for (int i = 0; i < resultsWaitListSize; i++) {
                waitlistEntry = resultsWaitListByFaculty.get(i); // fetch record from entity object                
                // Construct String to help display the Waitlist Status sorted by Date & Timestamp
                displayValue = displayFormater.format(waitlistEntry.getDdate());
                outputArray = outputArray.concat(displayValue);
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat(WAITLIST_STATUS) ;
                
                roomFacultyList.add(outputArray);                        
                outputArray = "";                
            }

            String outputFormatStr = "";

            for (int i=0; i < roomFacultyList.size(); i++) {
                outputFormatStr = outputFormatStr.concat(roomFacultyList.get(i));
                outputFormatStr = outputFormatStr.concat("\n");
            }
            statusListOnFacultyReservationTextArea1.setText(outputFormatStr);
        }                       
        else
            statusListOnFacultyReservationTextArea1.setText("");

    }//GEN-LAST:event_statusOfFacultyPanelComponentShown

    private void addingFacultyPanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_addingFacultyPanelComponentShown
        // TODO add your handling code here:

        addFacultyNameTextField.setText("");
        addFacultyStatusLabel.setText(" ");
    }//GEN-LAST:event_addingFacultyPanelComponentShown

    private void reservingRoomPanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_reservingRoomPanelComponentShown
        // TODO add your handling code here:

        addReserveStatusLabel.setText("  ");
    }//GEN-LAST:event_reservingRoomPanelComponentShown

    private void addRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomButtonActionPerformed
        // TODO add your handling code here:
        
        addRoomStatusLabel.setText("  ");
        addRoomStatusLabel2.setText("  ");
        
        Boolean existRoomFlag = false;
        Boolean existRoomCapacityFlag = false;
        
        // Enter room-Name and total capacity of Seats in that room.
        String inputRoomName = addRoomNameTextField.getText();
        int inputSeats = (Integer) addSeatsSpinner.getValue();

        // Validate the input 
        if (inputRoomName.length() <= 0) {
            addRoomStatusLabel.setText("Invalid room-name entered !");
            return;
        }
        
        existRoomFlag = RoomQueries.checkRoomByName(inputRoomName);
        if (existRoomFlag == true) {
            addRoomStatusLabel.setText("Room " + inputRoomName + " already exist.");
        }
        
        if (existRoomFlag == false) {
            RoomQueries.addRoom(inputRoomName, inputSeats);
            addRoomStatusLabel.setText("Room " + inputRoomName + " with " + inputSeats + " seats has been added to the Rooms Master List.");

////////
            //// Check WAITLIST to determine if another Faculty can be RESERVED to this Room
            //// on that Waitlisted 'DATE' for the respective requested SEATS based on waitlist-Priority.
            resultsWaitListBySeats = WaitlistQueries.getWaitlistBySeats(inputSeats);
            int resultsWaitListBySeatsSize = resultsWaitListBySeats.size();
            int requestedSeats;
            int reserveFlag = 0;
            if (resultsWaitListBySeatsSize != 0) {
                for (int i = 0; i < resultsWaitListBySeatsSize; i++) {
                    waitlistEntry = resultsWaitListBySeats.get(i); // fetch record from entity object                
                    requestedSeats = waitlistEntry.getSeats();

                    if (inputSeats >= requestedSeats ) {
                        // Room is having capacity for the Seats mentioned in the waitingList record
                        reserveFlag = reserveFlag + 1;
                        //break;
                    }
                    if (reserveFlag != 0) {

                        // RESERVE this Room for the Waitlisted Faculty (date, seats), and then delete the record from waitlist entry.
                        ReservationQueries.addReservationEntry(waitlistEntry.getFaculty(), waitlistEntry.getDdate().toString(), Integer.toString(waitlistEntry.getSeats()), inputRoomName);
                        WaitlistQueries.deleteWaitlistEntry(waitlistEntry.getFaculty(), waitlistEntry.getDdate().toString());
                    }
                    if (reserveFlag == 1) {
                        addRoomStatusLabel2.setText(waitlistEntry.getFaculty() + " is now RESERVED room " + inputRoomName + " for " + waitlistEntry.getDdate().toString() + " , and hence removed from Waitlist");                
                    }
                    if (reserveFlag == 2) {
                        addRoomStatusLabel3.setText(waitlistEntry.getFaculty() + " is now RESERVED room " + inputRoomName + " for " + waitlistEntry.getDdate().toString() + " , and hence removed from Waitlist");                
                    }
                    if (reserveFlag == 3) {
                        addRoomStatusLabel4.setText(waitlistEntry.getFaculty() + " is now RESERVED room " + inputRoomName + " for " + waitlistEntry.getDdate().toString() + " , and hence removed from Waitlist");                
                    }
                }
            }               
        }
        
    }//GEN-LAST:event_addRoomButtonActionPerformed

    private void addDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDateButtonActionPerformed
        // TODO add your handling code here:
        boolean existDateFlag = false;
        
        SimpleDateFormat displayFormater = new SimpleDateFormat("MM-dd-yyyy"); 
        String spinnerDisplayValue = displayFormater.format(addDateSpinner.getValue());

        SimpleDateFormat formater = new SimpleDateFormat("yyyy-MM-dd");
        String spinnerValue = formater.format(addDateSpinner.getValue());
        Date spinnerDate = Date.valueOf(spinnerValue);

        existDateFlag = DatesQueries.checkDate(spinnerDate);
        if (existDateFlag == true) {
            addDateStatusLabel.setText(spinnerDisplayValue + " already exist.");
        }
        
        if (existDateFlag == false) {
            DatesQueries.addDate(spinnerDate);
            addDateStatusLabel.setText(spinnerDisplayValue + " has been added to the Dates Master List.");
        }
        // rebuild the reservation faculty combo box.
        rebuildDateComboBoxes();

    }//GEN-LAST:event_addDateButtonActionPerformed

    private void cancelFacultyReservationComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cancelFacultyReservationComboBoxItemStateChanged
        // TODO add your handling code here:

        statusLabelCancelReservation.setText("  ");
        statusLabel2CancelReservation.setText("  ");

        rebuildDateReservationsByFacultyComboBoxes();
    }//GEN-LAST:event_cancelFacultyReservationComboBoxItemStateChanged

    private void deleteReservationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteReservationButtonActionPerformed
        // TODO add your handling code here:
        String inputFaculty = cancelFacultyReservationComboBox.getSelectedItem().toString(); // fetch selected item from ComboBox
        String inputDate = cancelFacultyDateReservationComboBox.getSelectedItem().toString(); // fetch selected item from ComboBox
        String facultyName = "";
        String roomName = "";
        int requestedSeats = 0;
        boolean existRoomCapacityFlag = true;
        int reserveFlag = 0;

        // Check - if the chosen faculty and date for room cancellation is from RESERVATION entity
        if (ReservationQueries.checkReservationsByFaculty(inputFaculty, inputDate) == true) {
            // Fetch reservation room-Name that is to be cancelled
            resultsReservationByFaculty = ReservationQueries.getReservationsByFacultyForDate(inputFaculty, inputDate);
            reservationEntry = resultsReservationByFaculty.get(0);
            roomName = reservationEntry.getRoom();
            
            // DELETE the room reserved for this faculty on the specified date
            ReservationQueries.deleteReservation(inputFaculty, inputDate);
            statusLabelCancelReservation.setText("Room " + roomName + " of Faculty " + inputFaculty + " dated " + inputDate + " is now Cancelled from Reservations. " );

////////
            //// Check WAITLIST to determine if another Faculty can be RESERVED to this Room
            //// on that Waitlisted 'DATE' for the respective requested SEATS based on waitlist-Priority.
            resultsWaitListByDate = WaitlistQueries.getWaitlistByDate(inputDate);
            int resultsWaitListByDateSize = resultsWaitListByDate.size();
    
            if (resultsWaitListByDateSize != 0) {
                for (int i = 0; i < resultsWaitListByDateSize; i++) {
                    waitlistEntry = resultsWaitListByDate.get(i); // fetch record from entity object                
                    facultyName = waitlistEntry.getFaculty();
                    requestedSeats = waitlistEntry.getSeats();

                    existRoomCapacityFlag = RoomQueries.checkRoomCapacityForSeats(roomName, Integer.toString(requestedSeats));
                    if (existRoomCapacityFlag == true) {
                        // Room is having capacity for the Seats mentioned in the waitingList record
                        reserveFlag = 1;
                        break;
                    }
                }
                if (reserveFlag == 1) {
                    
                    // RESERVE this Room for the Waitlisted Faculty (date, seats), and then delete the record from waitlist entry.
                    ReservationQueries.addReservationEntry(facultyName, inputDate, Integer.toString(requestedSeats), roomName);
                    WaitlistQueries.deleteWaitlistEntry(facultyName, inputDate);
        
                    statusLabel2CancelReservation.setText(facultyName + " is now RESERVED room " + roomName + " for " + inputDate + " , and hence removed from Waitlist");                
                }
            }               
        }
        
        // ELSE - if the chosen faculty and date for room cancellation is from WAITLIST entities
        if (WaitlistQueries.checkWaitlistByFaculty(inputFaculty, inputDate) == true) {
            WaitlistQueries.deleteWaitlistEntry(inputFaculty, inputDate);
            statusLabelCancelReservation.setText("Room of Faculty " + inputFaculty + " dated " + inputDate + " cancelled from Waitlist. " );
        }

        // rebuild the FacultyReservations combo box.        
        rebuildFacultyReservationsComboBox();

        // rebuild the DateReservationsByFaculty combo box.
        rebuildDateReservationsByFacultyComboBoxes();

    }//GEN-LAST:event_deleteReservationButtonActionPerformed

    private void deleteRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRoomButtonActionPerformed
        // TODO add your handling code here:
        dropRoomStatusLabel.setText("  ");
        dropRoomStatusLabel2.setText("  ");

        String inputRoomName = dropRoomNameComboBox.getSelectedItem().toString(); // fetch selected item from ComboBox
        boolean existRoomByName;
        
        existRoomByName = RoomQueries.checkRoomByName(inputRoomName);
        if (existRoomByName == true) 
        {
       
            // DELETE the Room-Name from its master entity
            RoomQueries.deleteRoom(inputRoomName);
            dropRoomStatusLabel.setText("Room " + inputRoomName + " is now deleted from the Rooms Master-set." );

            ///// Any faculty members that had this room reserved for any Date will get another room reserved for that Date 
            //    if possible, in priority sequence, and the new reservation reported to the user. 
            //    If the faculty member cannot get a new room reserved, the user is informed that the 
            //    faculty member could not get a new room reserved and that they have been placed on the waitlist.

            //// Check Reservations table (sort by DATE, Timestamp) - if any record exist with this room-Name that got deleted i.e. inputRoomName
            ArrayList<String> roomReservationsList = new ArrayList<>();  
            resultsReservationsByRoomList = ReservationQueries.getReservationsByRoom(inputRoomName);
            int resultsReservationsByRoomListSize = resultsReservationsByRoomList.size();

            if (resultsReservationsByRoomListSize != 0) 
            {
                //// If Yes, i.e records exist, then Loop through records to Check for another Room
                String facultyName;
                String reservedRoomName;
                int requestedSeats;
                String reservationDate;
                for (int i = 0; i < resultsReservationsByRoomListSize; i++) {
                    reservationEntry = resultsReservationsByRoomList.get(i); // fetch record from entity                 
                    facultyName = reservationEntry.getFaculty();
                    reservedRoomName = reservationEntry.getRoom();
                    reservationDate = reservationEntry.getDdate().toString();
                    requestedSeats = reservationEntry.getSeats();

                    //// DELETE this Reservation-record as this Room is deleted from its Master-list
                    ReservationQueries.deleteReservation(facultyName, reservationDate);

                ////// Check if another Room with same best-fit room-capacity of Seats exist for that Date for that Faculty
                    //// Check for total reserved-rooms available in Tiny College
                    ArrayList<String> roomReservedList = new ArrayList<String>();;
                    resultsRoomsReservedList = ReservationQueries.getRoomsReservedByDate(reservationDate);
                    int resultsRoomsReservedListSize = resultsRoomsReservedList.size();
                    if (resultsRoomsReservedListSize != 0) {
                        for (int k = 0; k < resultsRoomsReservedListSize; k++) {
                            reservationEntry2 = resultsRoomsReservedList.get(k);
                            roomReservedList.add(reservationEntry2.getRoom());
                        }    
                    }        
                    int totalRoomsReserved = roomReservedList.size();

                    //// Check for total rooms available in Tiny College
                    ArrayList<String> roomsList = new ArrayList<String>();          
                    resultsRoomList = roomQueries.getAllPossibleRooms();
                    int resultsRoomListSize = resultsRoomList.size();
                    if (resultsRoomListSize != 0) {
                        for (int j = 0; j < resultsRoomListSize; j++) {
                            roomEntry = resultsRoomList.get(j);
                            roomsList.add(roomEntry.getName());
                        }    
                    }                    
                    int totalRooms = roomsList.size();

                    //// If all rooms are reserved on that date, then add to Waitlist table
                    if (totalRoomsReserved == totalRooms) {
                        WaitlistQueries.addWaitlistEntry(facultyName, reservationDate, Integer.toString(requestedSeats));
                        dropRoomStatusLabel2.setText(facultyName + " is Waitlisted, as NO rooms are available for reservation on " + reservationDate);
                    }
                    else // add to Reservations table
                    {
                        //// If Yes, then - Delete that faculty record with current room-Name;  
                        //// but then Add-Reservation-Entry of that faculty record to that another available room-Name on same date & required seats
                        //// Display in Label-2

                        // As Room is available on that date, GET the best-fit Room based on requested-Seats
                        String roomName = RoomQueries.getBestFitRoom(Integer.toString(requestedSeats), roomReservedList);

                        if (roomName != "") {
                            // Add room Reservation for the Faculty requested for the specified Date
                            ReservationQueries.addReservationEntry(facultyName, reservationDate, Integer.toString(requestedSeats), roomName);
                            dropRoomStatusLabel03.setText(facultyName + " is automatically reserved room " + roomName + " for " + reservationDate);                
                        }
                        else 
                        {
                            WaitlistQueries.addWaitlistEntry(facultyName, reservationDate, Integer.toString(requestedSeats));
                            dropRoomStatusLabel03.setText(facultyName + " is Waitlisted, as NO suitable rooms for requested seats are available for reservation on " + reservationDate);
                        }            
                    }
                //////
                } // End-of For Loop (to check the Reservations record-wise for that deleted Room)
            }
        }
        
        rebuildRoomsComboBox();

    }//GEN-LAST:event_deleteRoomButtonActionPerformed

    private void statusOfFacultyComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_statusOfFacultyComboBoxItemStateChanged
        // TODO add your handling code here:
        ArrayList<String> roomFacultyList = new ArrayList<String>();  
        String inputFaculty = statusOfFacultyComboBox.getSelectedItem().toString(); // fetch selected item from ComboBox
                
        resultsReservationListByFaculty = ReservationQueries.getReservationsByFaculty(inputFaculty);
        resultsWaitListByFaculty = WaitlistQueries.getWaitlistByFaculty(inputFaculty);
        
        String outputArray = "";
        int resultsReservationListSize = resultsReservationListByFaculty.size();
        int resultsWaitListSize = resultsWaitListByFaculty.size();
        
        String displayValue = "";
        SimpleDateFormat displayFormater = new SimpleDateFormat("MM-dd-yyyy"); 

        if ((resultsReservationListSize != 0) || (resultsWaitListSize != 0)) {
            // Construct String to help display the HEADER info.
            outputArray = outputArray.concat("Reservation_Date");
            outputArray = outputArray.concat("\t");
            outputArray = outputArray.concat("Status");
            outputArray = outputArray.concat("\t");
            outputArray = outputArray.concat("\t");
            outputArray = outputArray.concat("Reserved_Room #");
            outputArray = outputArray.concat("\n");
            outputArray = outputArray.concat("\n");

            for (int i = 0; i < resultsReservationListSize; i++) {
                reservationEntry = resultsReservationListByFaculty.get(i); // fetch record from entity object                
                // Construct String to help display the Reservations Status sorted by Date & Timestamp
                displayValue = displayFormater.format(reservationEntry.getDdate());
                outputArray = outputArray.concat(displayValue);
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat(RESERVED_STATUS) ;
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat(reservationEntry.getRoom());
                
                roomFacultyList.add(outputArray);                        
                outputArray = "";                
            }

            for (int i = 0; i < resultsWaitListSize; i++) {
                waitlistEntry = resultsWaitListByFaculty.get(i); // fetch record from entity object                
                // Construct String to help display the Waitlist Status sorted by Date & Timestamp
                displayValue = displayFormater.format(waitlistEntry.getDdate());
                outputArray = outputArray.concat(displayValue);
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat("\t");
                outputArray = outputArray.concat(WAITLIST_STATUS) ;
                
                roomFacultyList.add(outputArray);                        
                outputArray = "";                
            }

            String outputFormatStr = "";

            for (int i=0; i < roomFacultyList.size(); i++) {
                outputFormatStr = outputFormatStr.concat(roomFacultyList.get(i));
                outputFormatStr = outputFormatStr.concat("\n");
            }
            statusListOnFacultyReservationTextArea1.setText(outputFormatStr);
        }                       
        else
            statusListOnFacultyReservationTextArea1.setText("");

    }//GEN-LAST:event_statusOfFacultyComboBoxItemStateChanged

    //////////// HELPER Methods
    
    public void rebuildFacultyComboBoxes()
    {
        ArrayList<String> facultyList = new ArrayList<String>();

        resultsFacultyList = facultyQueries.getAllFaculty();
        int resultsFacultyListSize = resultsFacultyList.size();
        if (resultsFacultyListSize != 0) {
            for (int i = 0; i < resultsFacultyListSize; i++) {
                facultyEntry = resultsFacultyList.get(i);
                facultyList.add(facultyEntry.getName());
            }        

            // Set values in reserveFaculty-ComboBox of 'Reserve Room' Tab
            reserveFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(facultyList.toArray()));        

            // Set values in statusOfFaculty-ComboBox of 'Reservation Status by Faculty' Tab
            statusOfFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(facultyList.toArray()));        

        }
    }

    public void rebuildDateComboBoxes()
    {
        ArrayList<String> datesList = new ArrayList<String>();

        resultsDatesList = datesQueries.getAllDates();
        int resultsDatesListSize = resultsDatesList.size();
        if (resultsDatesListSize != 0) {
            for (int i = 0; i < resultsDatesListSize; i++) {
                datesEntry = resultsDatesList.get(i);
                datesList.add(datesEntry.getDdate().toString());
            }        

            // Set values in reserveDate-ComboBox of 'Reserve Room' Tab
            reserveDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(datesList.toArray()));        

            // Set values in statusDate-ComboBox of 'Reservation Status by Date' Tab
            statusDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(datesList.toArray()));        
        }       
    }


    public void rebuildDateReservationsByFacultyComboBoxes()
    {
        ArrayList<String> roomFacultyList = new ArrayList<String>();  
        String inputFaculty = cancelFacultyReservationComboBox.getSelectedItem().toString(); // fetch selected item from ComboBox
                
        resultsReservationListByFaculty = ReservationQueries.getReservationsByFaculty(inputFaculty);
        resultsWaitListByFaculty = WaitlistQueries.getWaitlistByFaculty(inputFaculty);

        int resultsFacultyReservationListSize = resultsReservationListByFaculty.size();
        int resultsFacultyWaitListSize = resultsWaitListByFaculty.size();

        ArrayList<String> datesList = new ArrayList<String>();

        if (resultsFacultyReservationListSize != 0) {
            for (int i = 0; i < resultsFacultyReservationListSize; i++) {
                reservationEntry = resultsReservationListByFaculty.get(i); // fetch record from entity object                
                datesList.add(reservationEntry.getDdate().toString());               
            }
        }
        
        if (resultsFacultyWaitListSize != 0) {
            for (int i = 0; i < resultsFacultyWaitListSize; i++) {
                waitlistEntry = resultsWaitListByFaculty.get(i); // fetch record from entity object                
                datesList.add(waitlistEntry.getDdate().toString());               
            }
        }
        
        // Set values in cancelFacultyDateReservation-ComboBox of 'Cancel Reservation' Tab
        cancelFacultyDateReservationComboBox.setModel(new javax.swing.DefaultComboBoxModel(datesList.toArray()));  
    }

    public void rebuildFacultyReservationsComboBox()
    {
        ArrayList<String> roomFacultyList = new ArrayList<String>();  
                
        resultsAllReservationList = ReservationQueries.getAllFacultyReservations();
        resultsAllWaitingList = WaitlistQueries.getAllFacultyWaitlist();

        int resultsReservationListSize = resultsAllReservationList.size();
        int resultsWaitListSize = resultsAllWaitingList.size();

        String facultyName = "";
        int roomFacultyListLength = 0;
        int existFacultyFlag = 0;

        if (resultsReservationListSize != 0) {

            for (int i = 0; i < resultsReservationListSize; i++) {
                existFacultyFlag = 0;
                roomFacultyListLength = roomFacultyList.size();
    
                reservationEntry = resultsAllReservationList.get(i); // fetch record from entity object                
                facultyName = reservationEntry.getFaculty();
                
                for (int j = 0; j < roomFacultyListLength; j++) {
                    if (facultyName.equals(roomFacultyList.get(j))) {
                        existFacultyFlag = 1;
                        break;
                    }
                }
                if (existFacultyFlag == 0) {
                    roomFacultyList.add(facultyName); 
                }                                 
                              
            }
        }
        
        existFacultyFlag = 0;
        
        if (resultsWaitListSize != 0) {
            
            for (int i = 0; i < resultsWaitListSize; i++) {
                roomFacultyListLength = roomFacultyList.size();

                waitlistEntry = resultsAllWaitingList.get(i); // fetch record from entity object       
                facultyName = waitlistEntry.getFaculty();
    
                for (int k = 0; k < roomFacultyListLength; k++) {
                    if (facultyName.equals(roomFacultyList.get(k))) {
                        existFacultyFlag = 1;
                        break;
                    }
                }
                if (existFacultyFlag == 0) {
                    roomFacultyList.add(facultyName); 
                }                                 
            }
        }
        Collections.sort(roomFacultyList);
        // Set values in cancelFacultyDateReservation-ComboBox of 'Cancel Reservation' Tab
        cancelFacultyReservationComboBox.setModel(new javax.swing.DefaultComboBoxModel(roomFacultyList.toArray()));  
    }

    public void rebuildRoomsComboBox()
    {
        // Load the combobox with room-Names from backend db
        ArrayList<String> roomList = new ArrayList<>();
        resultsRoomList = roomQueries.getAllPossibleRooms();
        int resultsRoomListSize = resultsRoomList.size();
        
        if (resultsRoomListSize != 0) {
            for (int i = 0; i < resultsRoomListSize; i++) {
                roomEntry = resultsRoomList.get(i);
                roomList.add(roomEntry.getName());
            }        

            // Set values in dropRoomName-ComboBox of 'Drop Room' Tab
            dropRoomNameComboBox.setModel(new javax.swing.DefaultComboBoxModel(roomList.toArray()));        

        }
    }
    
    ///////////
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame dialog = new MainFrame(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDateButton;
    private javax.swing.JSpinner addDateSpinner;
    private javax.swing.JLabel addDateStatusLabel;
    private javax.swing.JButton addFacultyButton;
    private javax.swing.JTextField addFacultyNameTextField;
    private javax.swing.JLabel addFacultyStatusLabel;
    private javax.swing.JLabel addReserveStatusLabel;
    private javax.swing.JButton addRoomButton;
    private javax.swing.JTextField addRoomNameTextField;
    private javax.swing.JLabel addRoomStatusLabel;
    private javax.swing.JLabel addRoomStatusLabel2;
    private javax.swing.JLabel addRoomStatusLabel3;
    private javax.swing.JLabel addRoomStatusLabel4;
    private javax.swing.JSpinner addSeatsSpinner;
    private javax.swing.JPanel addingDatePanel;
    private javax.swing.JPanel addingFacultyPanel;
    private javax.swing.JPanel addingRoomPanel;
    private javax.swing.JComboBox<String> cancelFacultyDateReservationComboBox;
    private javax.swing.JComboBox<String> cancelFacultyReservationComboBox;
    private javax.swing.JPanel cancelFacultyReservationPanel;
    private javax.swing.JButton deleteReservationButton;
    private javax.swing.JButton deleteRoomButton;
    private javax.swing.JComboBox<String> dropRoomNameComboBox;
    private javax.swing.JPanel dropRoomPanel;
    private javax.swing.JLabel dropRoomStatusLabel;
    private javax.swing.JLabel dropRoomStatusLabel03;
    private javax.swing.JLabel dropRoomStatusLabel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox<String> reserveDateComboBox;
    private javax.swing.JComboBox<String> reserveFacultyComboBox;
    private javax.swing.JTextField reserveSeatsTextField;
    private javax.swing.JButton reserveSubmitButton;
    private javax.swing.JPanel reservingRoomPanel;
    private javax.swing.JComboBox<String> statusDateComboBox;
    private javax.swing.JLabel statusLabel2CancelReservation;
    private javax.swing.JLabel statusLabelCancelReservation;
    private javax.swing.JTextArea statusListOnFacultyReservationTextArea1;
    private javax.swing.JTextArea statusListOnReservationtTextArea1;
    private javax.swing.JTextArea statusListOnWaitlisttTextArea1;
    private javax.swing.JComboBox<String> statusOfFacultyComboBox;
    private javax.swing.JPanel statusOfFacultyPanel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JPanel waitlistStatusPanel;
    // End of variables declaration//GEN-END:variables
}
